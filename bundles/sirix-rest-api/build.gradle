buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.22"
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.14.5"
        //classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.10.0"
    }
}

test {
  useJUnitPlatform()
}

apply plugin: 'kotlin'
//apply plugin: 'org.jetbrains.dokka'
apply plugin: 'docker-compose'

dependencies {
    implementation project(':sirix-core')
    implementation project(':sirix-query')
    testImplementation project(':sirix-core').sourceSets.test.output

    implementation implLibraries.kotlinStdlib
    implementation implLibraries.kotlinxCoroutinesCore
    implementation implLibraries.vertxCore
    implementation implLibraries.vertxWeb
    implementation implLibraries.vertxLangKotlin
    implementation implLibraries.vertxLangKotlinCoroutines
    implementation implLibraries.vertxAuthOauth2
    implementation implLibraries.vertxWebClient
    implementation implLibraries.vertxConfig
    implementation implLibraries.kotlinStdlibJdk8
    implementation implLibraries.jsoup
    testImplementation testLibraries.kotlinTestJunit
    testImplementation testLibraries.junit
    testImplementation testLibraries.vertxJunit5
    testImplementation testLibraries.jsonassert

}



description = 'Non-blocking REST-API for SirixDB.'

shadowJar {
    archiveClassifier = 'fat'
    manifest {
        inheritFrom project.tasks.jar.manifest
    }
    mergeServiceFiles()
}

jar {
	manifest {
		attributes('Main-Verticle': 'io.sirix.rest.SirixVerticle',
				   'Main-Class': 'io.vertx.core.Launcher')
	}
    finalizedBy shadowJar
}

test {
    jvmArgs "-Duser.home=${buildDir}"
}

task copyCertificates(type: Copy) {
    from file("$buildDir/resources/main")
    include '*.pem'
    into file("$buildDir/sirix-data")
}
copyCertificates.dependsOn(processResources)

/*
task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
    configuration {
        platform = "JVM"
        jdkVersion = 8
    }
}

javadocJar.dependsOn dokkaJavadoc*/

test.dependsOn copyCertificates
test.dependsOn composeUp
test.finalizedBy composeDownForced

dockerCompose {
    useComposeFiles = ["${projectDir}/src/test/resources/docker-compose.yml"]

    removeImages = "None" // Other accepted values are: "All" and "Local"

    projectName = 'sirix-test'
}
