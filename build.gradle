apply from: "${rootDir}/libraries.gradle"

buildscript {
    ext.kotlin_version = '1.4.10'
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.10.2"
        classpath 'net.researchgate:gradle-release:2.8.1'
        classpath "com.github.ben-manes:gradle-versions-plugin:0.27.0"
        classpath "com.github.jengelman.gradle.plugins:shadow:5.2.0"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:5.6.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'net.researchgate.release'

release {
    failOnSnapshotDependencies = false
    tagTemplate = 'sirix-$version'
    buildTasks = ['releaseBuild']
}

task releaseBuild {
    project.afterEvaluate {
        dependsOn project.getTasksByName('build', true)
    }
}

task uploadPublications {
    project.afterEvaluate {
        dependsOn project.getTasksByName('publishAllPublicationsToMavenRepository', true)
    }
}

task travisReleaseSnapshot {
    if ("${version}".endsWith('SNAPSHOT') &&
            System.getenv("TRAVIS_PULL_REQUEST") == "false" &&
            System.getenv("TRAVIS_BRANCH") == "master") {
        dependsOn uploadPublications
    }
}

afterReleaseBuild.dependsOn(uploadPublications)

allprojects {
    group = 'io.sirix'

    apply plugin: 'jacoco'
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'idea'

    repositories {
        mavenCentral()
        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url "https://kotlin.bintray.com/kotlinx"
        }
        mavenLocal()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: "com.diffplug.spotless"

    java {
        sourceCompatibility = JavaVersion.VERSION_14
        targetCompatibility = JavaVersion.VERSION_14
        withSourcesJar()
        withJavadocJar()

        if (JavaVersion.current() != targetCompatibility){
            throw new GradleException("This build must be run with Java " + targetCompatibility.toString())
        }
    }

    javadoc {
        failOnError = false
        options {
            addBooleanOption('-enable-preview', true)
            addStringOption('-release', '14')
            addStringOption('-add-modules', 'jdk.incubator.foreign')
        }
    }

    compileJava {
        options.compilerArgs += ["--enable-preview", "--add-modules=jdk.incubator.foreign"]
    }

    compileTestJava {
        options.compilerArgs += ["--enable-preview", "--add-modules=jdk.incubator.foreign"]
    }

    tasks.withType(JavaCompile).each {
        it.options.compilerArgs.add('--enable-preview')
    }
    
    test {
        testLogging {
            events "failed"
            exceptionFormat "short"
        }

        useJUnitPlatform()
    }

    spotless {
        enforceCheck false
        java {
            licenseHeaderFile "${rootDir}/LICENSE"
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                afterEvaluate {
                    pom {
                        name = "${project.name}"
                        description = "${project.description}"
                        url = "https://sirix.io"
                        licenses {
                            license {
                                name = "New BSD"
                                url = "http://www.opensource.org/licenses/bsd-license.php"
                                comments = "3-clause BSD License"
                            }
                        }
                        scm {
                            connection = "scm:git:git@github.com:sirixdb/sirix.git"
                            developerConnection = "scm:git:git@github.com:sirixdb/sirix.git"
                            url = "https://github.com/sirixdb/sirix"
                        }
                        issueManagement {
                            url = "https://github.com/sirixdb/sirix/issues"
                            system = "GitHub Issues"
                        }
                        ciManagement {
                            system = "Travis CI"
                            url = "http://travis-ci.org/#!/sirixdb/sirix"
                        }
                        developers {
                            developer {
                                id = "johanneslichtenberger"
                                name = "Johannes Lichtenberger"
                                email = "johannes.lichtenberger@sirix.io"
                            }
                        }
                    }
                    from components.java
                }
            }
        }
        repositories {
            maven {
                credentials {
                    username System.getenv("SONATYPE_NEXUS_USERNAME")
                    password System.getenv("SONATYPE_NEXUS_PASSWORD")
                }
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = rootProject.getProperties().version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            }
        }
    }

    ext.isReleaseVersion = !rootProject.getProperties().version.endsWith('SNAPSHOT')

    tasks.withType(Sign) {
        onlyIf { isReleaseVersion }
    }

    signing {
        required { isReleaseVersion }
        sign publishing.publications.maven
    }

    configurations {
        testArtifacts.extendsFrom testImplementation
    }

    task testsJar(type: Jar) {
        archiveClassifier = 'tests'
        from(sourceSets.test.output)
    }

    artifacts {
        testArtifacts testsJar
    }

    jar {
        into("META-INF/maven/io.sirix/$project.name") {
            from { generatePomFileForMavenPublication }
            rename ".*", "pom.xml"
        }
    }

    publishing.publications.maven.artifact(testsJar)

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    test {
        useTestNG()
        useJUnit()
        jvmArgs(["--enable-preview", "--add-modules=jdk.incubator.foreign"])

        minHeapSize = '2g'
        maxHeapSize = '7g'
    }
}

task jacocoRootReport(type: JacocoReport) {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn = subprojects.test
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
    executionData.setFrom files(subprojects.jacocoTestReport.executionData).filter {
        file -> file.exists()
    }.asList()
    reports {
        html.enabled = true
        xml.enabled = true
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}
